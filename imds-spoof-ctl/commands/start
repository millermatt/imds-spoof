#!/bin/bash

# Copyright 2023 Matt Miller https://github.com/millermatt
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# these lines allow `set -u` (no undefined variables) to work for the rest of the script
export IMDS_SPOOF_BROKER_COMMAND=$IMDS_SPOOF_BROKER_COMMAND
export IMDS_SPOOF_BROKER_EXTERNAL_COMMAND=$IMDS_SPOOF_BROKER_EXTERNAL_COMMAND
export IMDS_SPOOF_BROKER_FOLDER=$IMDS_SPOOF_BROKER_FOLDER
export IMDS_SPOOF_BROKER_HOST=$IMDS_SPOOF_BROKER_HOST
export IMDS_SPOOF_BROKER_PORT=$IMDS_SPOOF_BROKER_PORT
export IMDS_SPOOF_PROXY_DOCKER_CONTAINER_NAME=$IMDS_SPOOF_PROXY_DOCKER_CONTAINER_NAME
export IMDS_SPOOF_PROXY_DOCKER_IMAGE=$IMDS_SPOOF_PROXY_DOCKER_IMAGE
export IMDS_SPOOF_PROXY_DOCKER_NETWORK_NAME=$IMDS_SPOOF_PROXY_DOCKER_NETWORK_NAME
export IMDS_SPOOF_PROXY_DOCKER_RUN_PARAMS=$IMDS_SPOOF_PROXY_DOCKER_RUN_PARAMS

set -eu

source "$(dirname $0)/../util/broker-ctl"

startDockerNetwork() {
  if [[ "$(docker network list --format '{{.Name}}' | grep "^${IMDS_SPOOF_PROXY_DOCKER_NETWORK_NAME}$")" == "" ]]; then
    # Get the list of Docker network names
    networks=$(docker network ls --format '{{.Name}}')

    # Iterate over each network
    for network in $networks; do
      if [[ $network != $IMDS_SPOOF_PROXY_DOCKER_NETWORK_NAME ]]; then
        # Inspect the network and check the subnet
        subnet=$(docker network inspect $network --format '{{range .IPAM.Config}}{{.Subnet}}{{end}}')

        # Check if the subnet matches the desired IP range
        if [[ $subnet == "169.254.169"* ]]; then
          echo "Docker network '$network' is using the IP range 169.254.169.x. Cannot start imds-spoof Docker network." >/dev/stderr
          return 1
        fi
      fi
    done

    docker network create --driver bridge --ip-range 169.254.169.0/16 --subnet 169.254.169.127/24 $IMDS_SPOOF_PROXY_DOCKER_NETWORK_NAME 1>/dev/null
  fi
  echo "imds-spoof Docker network is running."
}

startProxy() {
  # set -x
  if [[ "$(docker container list --format '{{.Names}}' | grep "^${IMDS_SPOOF_PROXY_DOCKER_CONTAINER_NAME}$")" == "" ]]; then
    eval "docker container create -it --rm --name $IMDS_SPOOF_PROXY_DOCKER_CONTAINER_NAME $IMDS_SPOOF_PROXY_DOCKER_RUN_PARAMS $IMDS_SPOOF_PROXY_DOCKER_IMAGE 1>/dev/null"
    docker network connect --ip 169.254.169.254 $IMDS_SPOOF_PROXY_DOCKER_NETWORK_NAME $IMDS_SPOOF_PROXY_DOCKER_CONTAINER_NAME
    docker network disconnect bridge $IMDS_SPOOF_PROXY_DOCKER_CONTAINER_NAME
    docker container start $IMDS_SPOOF_PROXY_DOCKER_CONTAINER_NAME 1>/dev/null
    # docker logs $IMDS_SPOOF_PROXY_DOCKER_CONTAINER_NAME
  fi
  # set +x
  echo "imds-spoof Docker proxy is running."
  echo "To attach your application's container to the imds-spoof Docker network run:"
  echo -e "  \033[32mdocker network connect imds-spoof <container name>\033[0m"
  echo "Or specify the imds-spoof network for your service in a docker compose file."
}

startDockerNetwork
startProxy
startBroker
